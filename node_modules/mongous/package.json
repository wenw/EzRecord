{
  "name": "mongous",
  "version": "0.2.5",
  "author": {
    "name": "Mark Nadal"
  },
  "description": "Simple MongoDB driver",
  "homepage": "http://github.com/amark/mongous",
  "engines": [
    "node >= 0.2.2"
  ],
  "main": "mongous",
  "readme": "Mongous\r\n==========\r\nMongous, for hu*mongous*, is a simple and blazing fast MongoDB driver that uses a jQuery like syntax.\r\n\r\n### How it works\r\n\r\n\tvar $ = require(\"mongous\").Mongous;\r\n\r\n\t$(\"database.collection\").save({my:\"value\"});\r\n\r\n\t$(\"database.collection\").find({},function(r){\r\n\t\tconsole.log(r);\r\n\t});\r\n\r\nDone. App development has never felt as close to the shell as this! Making it a breeze to grab'n'store anything anywhere in your code without the nasty hassle of connections, collections, and cascading callbacks.\r\n\r\n### Database & Collections\r\n\r\n- <code>db('Database.Collection')</code>\r\n\t- Database is the name of your database\r\n\t- Collection is the name of your collection\r\n\t- Examples\r\n\t\t- <code>db('blog.post')</code>\r\n\t\t- <code>db('blog.post.body')</code>\r\n\r\n### Commands\r\n\r\n- **Update** <code>db('blog.post').update(find, update, ...)</code>\r\n\t- find\r\n\t\tis the object you want to find.\r\n\t- update\r\n\t\tis what you want to update find with.\r\n\t- ...\r\n\t\t- <code>{ upsert: true, multi: false }</code>\r\n\t\t- <code> true, true </code>\r\n- **Save** <code>db('blog.post').save(what)</code>\r\n\t- what\r\n\t\tis the object to be updated or created.\r\n- **Insert** <code>db('blog.post').insert(what...)</code>\r\n\t- what\r\n\t\tis an object to be created.\r\n\t\tis an array of objects to be created.\r\n\t- Examples\r\n\t\t- <code>db('blog.post').save({hello: 'world'})</code>\r\n\t\t- <code>db('blog.post').save([{hello: 'world'}, {foo: 'bar'}])</code>\r\n\t\t- <code>db('blog.post').save({hello: 'world'}, {foo: 'bar'})</code>\r\n- **Remove** <code>db('blog.post').remove(what, ...)</code>\r\n\t- what is the object to be removed.\r\n\t- ...\r\n\t\ttrue for atomic.\r\n- **Find** <code>db('blog.users').find(..., function(reply){ })</code>\r\n\t- reply\r\n\t\tis the reply from MongoDB.\r\n\t- reply.documents\r\n\t\tare the documents that you found from MongoDB.\r\n\t- ... <br/>\r\n\t\tparams are filtered by type\r\n\t\t- Objects\r\n\t\t\t- first object\r\n\t\t\t\tis what you want to find.\r\n\t\t\t- second object\r\n\t\t\t\tare fields you want\r\n\t\t\t\t<br/>Ex: <code>{ name: 1, age: 1 }</code>\r\n\t\t\t- third object\r\n\t\t\t\tis any of the following options:\r\n\t\t\t\t<br/> <code>{ lim: x, skip: y, sort:{age: 1} }</code>\r\n\t\t- Numbers\r\n\t\t\t- first number\r\n\t\t\t\tis the limit (return all if not specified)\r\n\t\t\t- second number\r\n\t\t\t\tis the skip\r\n\t- Examples\r\n\t\t- <code>db('blog.users').find(5, function(reply){ })</code><br/>\r\n\t\t\treply.documents is the first 5 documents,\r\n\t\t- <code>db('blog.users').find(5, {age: 23}, function(reply){ })</code><br/>\r\n\t\t\twith age of 23,\r\n\t\t- <code>db('blog.users').find({age: 27}, 5, {name: 1}, function(reply){ })</code><br/>\r\n\t\t\tand a name.\r\n\t\t- <code>db('blog.users').find(5, {age: 27}, {name: 1}, {lim: 10}, function(reply){ })</code><br/>\r\n\t\t\tis the same as the previous example, except the limit is 10 instead of 5.\r\n\t\t- <code>db('blog.users').find(5, function(reply){ }, 2)</code><br/>\r\n\t\t\treply.documents skips the first 2 documents and is the next 3 documents.\r\n\t\t- <code>db('blog.users').find(function(reply){ }, {age: 25}, {}, {limit: 5, skip: 2})</code><br/>\r\n\t\t\tis the same as the previous example except only of doucments with the age of 25.\r\n\t\t- <code>db('blog.users').find({}, {}, {sort: {age: -1}}, function(reply){ })</code><br/>\r\n\t\t\treply.documents is sorted by age in a decsending (acsending while it is {age:1} ) order.  \r\n- **Operations** <code>db('blog.$cmd').find(command,1)</code>\r\n\t- command\r\n\t\tis the database operation command you want to perform.\r\n\t- Example\r\n\t\t<code>db('blog.$cmd').find({drop:\"users\"},1)</code><br/>\r\n\t\tdrops the users collection, deleting it.\r\n- **Authentication** <code>db('blog.$cmd').auth(username,password,callback)</code>\r\n\t- username, password <br/>\r\n\t\tusername and password of the 'blog' database\r\n\t- callback <br/>\r\n\t\tthe callback function when authentication is finished.\r\n\t- Example\r\n\t\t- <code>db('blog.$cmd').auth('user','pass',function(reply){})</code><br/>\r\n- **Open** <code>db().open(host,port)</code>\r\n\t- Only necessary to call if you explicitly want a different host and port, elsewise it lazy opens.\r\n\t\t\t\r\nMongous is a reduction ('less is more') of node-mongodb-driver by Christian Kvalheim.",
  "readmeFilename": "README.md",
  "_id": "mongous@0.2.5",
  "dist": {
    "shasum": "1dec8a3571fc41363acac6103af1f98527e3334e"
  },
  "_from": "mongous@",
  "_resolved": "https://registry.npmjs.org/mongous/-/mongous-0.2.5.tgz"
}
